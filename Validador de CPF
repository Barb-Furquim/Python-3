'''

CPF = 168.995.350-09
__________________________________________________
1 * 10 = 10                #     1 * 11 = 11   <---
6 * 9 = 54                 #     6 * 10 = 60
8 * 8 = 64                 #     8 * 9 = 72
9 * 7 = 63                 #     9 * 8 = 72
9 * 6 = 54                 #     9 * 7 = 63
5 * 5 = 25                 #     5 * 6 = 30
3 * 4 = 12                 #     3 * 5 = 15
5 * 3 = 15                 #     5 * 4 = 20
0 * 2 = 0                  #     0 * 3 = 0
total: 297                 #     0 * 2 = 0
                           # --> total: 343
11 - (297 % 11) = 11       #
11 > 9 = 0                 #     11 - (343 % 11) = 9
Digito 1 = 0               #     Digito 2 = 9

'''

# cpf = '16899535009'                        # Somente para teste da atividade, pois não é correto deixar dados hardcoded dentro do código
cpf = input("Digite um cpf: ")
novo_cpf = cpf[:-2]                          # Elimina os dois últimos digitos do CPF
reverso = 10                                 # Contador reverso
total = 0                                    # Salvar a soma total de cada índice

# Loop do CPF
for index in range(19):                      # Contar 19 laços de forma crescente
    if index > 8:                            # Primeiro índice vai de 0 a 9
        index -= 9                           # São os 9 primeiros digitos do CPF

    # print(cpf[index], index, reverso)      # Somente para visualizar os dados

    total += int(novo_cpf[index]) * reverso  # Valor total da multiplicação

    reverso -= 1                              # Decrementa do contador reverso
    if reverso < 2:                           
        reverso = 11
        d = 11 - (total % 11)                 

        if d > 9:                             # Se o digito for > que 9 o valor é 0
            d = 0
        total = 0                             # Zerar total
        novo_cpf += str(d)                    # Concatenar o digito gerado no "novo_cpf"

# Evita sequencias
sequencia = novo_cpf == str(novo_cpf[0]) * len(cpf)

if cpf == novo_cpf and not sequencia:                           # Validação do cpf
    print("Válido")
else:
    print("Inválido")
